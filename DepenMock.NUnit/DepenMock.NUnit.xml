<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DepenMock.NUnit</name>
    </assembly>
    <members>
        <member name="T:DepenMock.NUnit.Attributes.LogOutputTestActionAttribute">
            <summary>
            Internal test action attribute that automatically outputs log messages based on LogOutputAttribute configuration.
            This attribute is automatically applied by the NUnit framework when LogOutputAttribute is present.
            </summary>
        </member>
        <member name="M:DepenMock.NUnit.Attributes.LogOutputTestActionAttribute.BeforeTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Executes before the test to capture initial state.
            </summary>
            <param name="test">The test that is about to be run.</param>
        </member>
        <member name="M:DepenMock.NUnit.Attributes.LogOutputTestActionAttribute.AfterTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Executes after the test to output logs if conditions are met.
            </summary>
            <param name="test">The test that was run.</param>
        </member>
        <member name="M:DepenMock.NUnit.Attributes.LogOutputTestActionAttribute.GetLoggerFromTestInstance(System.Object)">
            <summary>
            Attempts to extract the logger from the test instance using reflection.
            </summary>
            <param name="testInstance">The test instance.</param>
            <returns>The test logger if found, null otherwise.</returns>
        </member>
        <member name="T:DepenMock.NUnit.BaseTest">
            <summary>
            Represents the base class for test fixtures that require a dependency injection container.
            </summary>
            <remarks>This class provides a common setup mechanism for initializing a <see cref="P:DepenMock.NUnit.BaseTest.Container"/> instance
            for each test fixture. Derived classes can use the <see cref="P:DepenMock.NUnit.BaseTest.Container"/> property to register and resolve
            dependencies.</remarks>
        </member>
        <member name="M:DepenMock.NUnit.BaseTest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DepenMock.NUnit.BaseTest"/> class.
            </summary>
            <remarks>This constructor initializes the <see cref="P:DepenMock.NUnit.BaseTest.Container"/> property and performs initial setup.
            The setup is also performed in the SetUp method to maintain NUnit lifecycle compatibility.</remarks>
        </member>
        <member name="M:DepenMock.NUnit.BaseTest.BaseSetup">
            <summary>
            Sets up the test environment by initializing the dependency injection container.
            </summary>
            <remarks>This method is executed before each test to ensure a fresh instance of the container. It is
            marked with the <see cref="T:NUnit.Framework.SetUpAttribute"/> to indicate that it should run prior to each test in
            NUnit.</remarks>
        </member>
        <member name="M:DepenMock.NUnit.BaseTest.BaseTearDown">
            <summary>
            Performs cleanup operations after each test execution.
            </summary>
            <remarks>This method resets the test container and marks the test as uninitialized.  It is executed
            automatically after each test due to the <see cref="T:NUnit.Framework.TearDownAttribute"/>.</remarks>
        </member>
        <member name="M:DepenMock.NUnit.BaseTest.InitializeContainer">
            <summary>
            Initializes the container
            </summary>
        </member>
        <member name="P:DepenMock.NUnit.BaseTest.Container">
            <summary>
            Gets the container instance associated with the current object.
            </summary>
        </member>
        <member name="T:DepenMock.NUnit.BaseTestByAbstraction`2">
            <summary>
            Serves as a base class for tests that rely on abstraction, providing functionality to resolve the system under test
            (SUT).
            </summary>
            <remarks>This class is designed to facilitate testing scenarios where the system under test is resolved from a
            dependency container. Derived classes can use the <see cref="M:DepenMock.NUnit.BaseTestByAbstraction`2.ResolveSut"/> method to retrieve an instance of
            <typeparamref name="TTestType"/>.</remarks>
            <typeparam name="TTestType">The concrete type of the system under test. Must be a class that implements <typeparamref name="TInterfaceType"/>.</typeparam>
            <typeparam name="TInterfaceType">The interface or base type that <typeparamref name="TTestType"/> implements or inherits.</typeparam>
        </member>
        <member name="M:DepenMock.NUnit.BaseTestByAbstraction`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:BaseTestByAbstraction"/> class and registers logger implementations 
            in the dependency container.
            </summary>
            <remarks>This constructor ensures that logger implementations are available for dependency injection 
            during the test execution.</remarks>
        </member>
        <member name="M:DepenMock.NUnit.BaseTestByAbstraction`2.Setup">
            <summary>
            Sets up the test environment by registering the logger implementation in the dependency container.
            </summary>
            <remarks>This method is intended to be used as a setup step in unit tests, ensuring that the specified
            logger  implementation is available for dependency injection during the test execution.</remarks>
        </member>
        <member name="M:DepenMock.NUnit.BaseTestByAbstraction`2.PerformSetup">
            <summary>
            Performs the setup logic, ensuring it only runs once per test instance.
            </summary>
        </member>
        <member name="M:DepenMock.NUnit.BaseTestByAbstraction`2.ResolveSut">
            <summary>
            Resolves an instance of the system under test (SUT) from the container.
            </summary>
            <remarks>This method attempts to resolve an instance of the specified type from the container.  If the
            container is null or the type cannot be resolved, the method returns <see langword="null"/>.</remarks>
            <returns>An instance of <typeparamref name="TInterfaceType"/> if successfully resolved; otherwise, <see
            langword="null"/>.</returns>
        </member>
        <member name="P:DepenMock.NUnit.BaseTestByAbstraction`2.Logger">
            <summary>
            Gets the logger instance used for logging messages related to the current test type.
            </summary>
        </member>
        <member name="M:DepenMock.NUnit.BaseTestByAbstraction`2.TearDown">
            <summary>
            Tears down the test environment and outputs log messages if configured.
            </summary>
            <remarks>This method is executed after each test to output log messages when the <see cref="T:DepenMock.Attributes.LogOutputAttribute"/>
            is present on the test method or class. It uses NUnit's TestContext to determine test results and output
            log messages accordingly.</remarks>
        </member>
        <member name="M:DepenMock.NUnit.BaseTestByAbstraction`2.AddContainerCustomizations(DepenMock.Container)">
            <summary>
            Allows derived classes to add custom ISpecimenBuilder instances to the container's fixture.
            </summary>
            <param name="container">The test's dependency injection container.</param>
        </member>
        <member name="T:DepenMock.NUnit.BaseTestByType`1">
            <summary>
            Represents a base class for tests that are specific to a given type.
            </summary>
            <remarks>This class provides functionality to resolve the subject under test (SUT) from a dependency injection
            container. Derived classes can use this functionality to access the SUT.</remarks>
            <typeparam name="TTestType">The type of the subject under test (SUT). Must be a reference type.</typeparam>
        </member>
        <member name="M:DepenMock.NUnit.BaseTestByType`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:BaseTestByType"/> class and registers a logger for the specified
            test type.
            </summary>
            <remarks>This constructor ensures that a logger of type <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> is registered
            in the container for the test type. Derived classes can rely on this registration for logging
            purposes.</remarks>
        </member>
        <member name="M:DepenMock.NUnit.BaseTestByType`1.Setup">
            <summary>
            Sets up the test environment by registering required dependencies in the container.
            </summary>
            <remarks>This method is executed before each test to ensure the necessary dependencies, such as  the
            logger, are properly configured in the container. It is marked with the <see cref="T:NUnit.Framework.SetUpAttribute"/>  to
            indicate that it should run prior to each test in NUnit.</remarks>
        </member>
        <member name="M:DepenMock.NUnit.BaseTestByType`1.PerformSetup">
            <summary>
            Performs the setup logic, ensuring it only runs once per test instance.
            </summary>
        </member>
        <member name="M:DepenMock.NUnit.BaseTestByType`1.ResolveSut">
            <summary>
            Resolves an instance of the specified type from the container.
            </summary>
            <remarks>This method retrieves an instance of <typeparamref name="TTestType"/> from the container, if
            available. Ensure that the container is properly initialized and contains a registration for <typeparamref
            name="TTestType"/>.</remarks>
            <returns>An instance of <typeparamref name="TTestType"/> if the container is not null and the type is registered;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="P:DepenMock.NUnit.BaseTestByType`1.Logger">
            <summary>
            Gets the logger instance used for logging operations specific to the <typeparamref name="TTestType"/> type.
            </summary>
        </member>
        <member name="M:DepenMock.NUnit.BaseTestByType`1.TearDown">
            <summary>
            Tears down the test environment and outputs log messages if configured.
            </summary>
            <remarks>This method is executed after each test to output log messages when the <see cref="T:DepenMock.Attributes.LogOutputAttribute"/>
            is present on the test method or class. It uses NUnit's TestContext to determine test results and output
            log messages accordingly.</remarks>
        </member>
        <member name="M:DepenMock.NUnit.BaseTestByType`1.AddContainerCustomizations(DepenMock.Container)">
            <summary>
            Allows derived classes to add custom ISpecimenBuilder instances to the container's fixture.
            </summary>
            <param name="container">The test's dependency injection container.</param>
        </member>
    </members>
</doc>
