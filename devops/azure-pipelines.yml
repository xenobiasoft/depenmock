trigger:
  tags:
    include:
      - 'v*'

variables:
  - template: variables.yml

pool:
  vmImage: "ubuntu-latest"

jobs:
  - job: BuildPackPublish
    displayName: build, pack, and publish nuget package
    steps:
      - task: UseDotNet@2
        displayName: 'Install .NET SDK'
        inputs:
            packageType: 'sdk'
            version: '8.0.x'

      - checkout: self
        displayName: 'Checkout Code'
        fetchDepth: 0

      - script: echo "##vso[task.setvariable variable=VERSION]$(Build.SourceBranch | sed 's|refs/tags/v||')"
        displayName: 'Extract Version from Tag'
  
      - script: |
          echo "Extracted version: $(VERSION)"
        displayName: 'Debug Version Output'

      - task: NuGetCommand@2
        displayName: 'Restore Dependencies'
        inputs:
          command: restore
          projects: "**/*.csproj"
          includeNuGetOrg: true
          feedsToUse: "select"
          vstsFeed: $(vstsFeed)

      - task: VSBuild@1
        displayName: 'Build Solution'
        inputs:
          command: build
          arguments: "--configuration Release"
          projects: "**/*.csproj"

      - task: NuGetCommand@2
        displayName: 'Pack NuGet Package'
        inputs:
          command: 'pack'
          packagesToPack: '**/*.csproj'
          configuration: 'Release'
          versioningScheme: byEnvVar
          versionEnvVar: VERSION
          outputDirectory: '$(Build.ArtifactStagingDirectory)/Release'

      - script: |
          PACKAGE_ID=$(grep -oP '(?<=<PackageId>).*(?=</PackageId>)' **/*.csproj)
          EXISTS=$(curl -sL "https://api.nuget.org/v3-flatcontainer/$PACKAGE_ID/index.json" | grep -o "$(VERSION)" || true)
          if [ -z "$EXISTS" ]; then
            echo "##vso[task.setvariable variable=PUBLISH;]true"
          else
            echo "##vso[task.setvariable variable=PUBLISH;]false"
          fi
        displayName: 'Check if Package Already Exists on NuGet'

      - task: NuGetCommand@2
        displayName: 'Push NuGet Package'
        condition: eq(variables['PUBLISH'], 'true')
        inputs:
          command: 'push'
          nuGetFeedType: 'internal'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/Release/**/*$(GITTAG).nupkg'
          publishVstsFeed: $(vstsFeed)